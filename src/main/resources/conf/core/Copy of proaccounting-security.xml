<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans   
	http://www.springframework.org/schema/beans/spring-beans-4.0.xsd    
	http://www.springframework.org/schema/security   
	http://www.springframework.org/schema/security/spring-security-3.2.xsd">

	<!--对静态资源不做拦截-->
	<http pattern="/**/*.jpg" security="none" />
	<http pattern="/**/*.png" security="none" />
	<http pattern="/**/*.gif" security="none" />
	<http pattern="/**/*.css" security="none" />
	<http pattern="/**/*.js"  security="none" />
	
	<!--对拦截资源响应设置-->
	<http use-expressions="true" auto-config="true">

		<!--对页面信息url进行拦截，这里配置成accountms表示对mis工程中所有的页面都进行拦截 -->
		
		
<!-- 		<intercept-url pattern="/accountms/*" access="ROLE_ADMIN" />
		<intercept-url pattern="/user/*" access="ROLE_ADMIN" /> -->
		<access-denied-handler ref="accessDeniedHandler" />

		<!-- default-target-url 登录成功后跳转的 URL -->
		<!-- always-use-default-target 是否登录成功后总是首先访问 default-target-url -->
		<!-- login-processing-url 处理登录请求的ACTION -->
		<!--authentication-failure-url 验证失败后的url -->
		<form-login login-page="/accountms/login.html"
			default-target-url="/accounms/main.html" always-use-default-target="true"
			authentication-failure-url="/auth_fail?errorId=204" />

		<logout invalidate-session="true" logout-success-url="/accountms/login.html"
			logout-url="/j_spring_security_logout" />

		<!--免登陆验证 -->
		<remember-me />

		<!-- max-sessions:允许用户帐号登录的次数。范例限制用户只能登录一次。 -->
		<!-- 此值表示：用户第二次登录时，前一次的登录信息都被清空。 -->
		<!-- exception-if-maximum-exceeded:默认为false， -->
		<!-- 当exception-if-maximum-exceeded="true"时系统会拒绝第二次登录。 -->

		<session-management invalid-session-url="/accountms/login.html"
			session-fixation-protection="none">
			<!-- session-authentication-strategy-ref="concurrentSessionControlAuthenticationStrategy" -->
			<concurrency-control max-sessions="1"
				error-if-maximum-exceeded="false" />
		</session-management>

		<custom-filter ref="securityFilter" before="FILTER_SECURITY_INTERCEPTOR"></custom-filter>

	</http>

	<!--权限控制相关bean开始 -->
	<beans:bean id="concurrentSessionControlAuthenticationStrategy"
		class="org.springframework.security.web.authentication.session.ConcurrentSessionControlStrategy">
		<beans:constructor-arg name="sessionRegistry"
			ref="sessionRegistry" />
		<beans:property name="maximumSessions" value="1" />
		<!-- 防止session攻击 -->
		<beans:property name="alwaysCreateSession" value="true" />
		<beans:property name="migrateSessionAttributes" value="false" />
		<!-- 同一个帐号 同时只能一个人登录 -->
		<beans:property name="exceptionIfMaximumExceeded"
			value="false" />
	</beans:bean>
	<beans:bean id="sessionRegistry"
		class="org.springframework.security.core.session.SessionRegistryImpl" />

	<!--1. 一个自定义的filter，必须包含authenticationManager,accessDecisionManager,securityMetadataSource三个属性， 
		我们的所有控制将在这三个类中实现，解释详见具体配置 -->
	<beans:bean id="securityFilter"
		class="com.mltech.proaccounting.aop.MyFilterSecurityInterceptor">
		<beans:property name="authenticationManager" ref="myAuthenticationManager" />
		<beans:property name="accessDecisionManager" ref="myAccessDecisionManagerBean" />
		<beans:property name="securityMetadataSource" ref="securityMetadataSource" />
	</beans:bean>

	<!-- 获取用户登入角色信息 -->
	<beans:bean id="myUserDetailService"
		class="com.mltech.proaccounting.service.MyUserDetailService" />

	<!--验证用户请求是否有权限 -->
	<beans:bean id="myAccessDecisionManagerBean"
		class="com.mltech.proaccounting.aop.MyAccessDecisionManager" />
	<!-- 资源源数据定义，即定义某一资源可以被哪些角色访问 -->
	<beans:bean id="securityMetadataSource"
		class="com.mltech.proaccounting.aop.MyInvocationSecurityMetadataSource" />

	<!--用户登录验证 -->

	<beans:bean id="LoginAuthenticationFilter"
		class="org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter">
		<beans:property name="authenticationManager" ref="myAuthenticationManager" />
		<beans:property name="filterProcessesUrl" value="/user/j_spring_security_check" />
		<beans:property name="authenticationSuccessHandler"
			ref="authenticateSuccessHandler" />
		<beans:property name="authenticationFailureHandler"
			ref="authenticateFailureHandler" />
	</beans:bean>

	<beans:bean id="accessDeniedHandler"
		class="com.mltech.proaccounting.aop.MyAccessDeniedHandler">
		<beans:property name="accessDeniedUrl" value="/accountms/login.html" />

	</beans:bean>
	<!-- 实现了UserDetailsService的Bean -->
	<authentication-manager alias="myAuthenticationManager">
		<!--自定义userDetailService类 -->
		<authentication-provider user-service-ref="myUserDetailService">
			<!-- <authentication-provider> 登入 密码 采用MD5加密 <password-encoder hash="md5" 
				ref="passwordEncoder"/> 以配置文件形式定义用户信息 <user-service> <user name="proaccounting" 
				password="proaccounting@" authorities ="ROLE_ADMIN" /> <user name="bob" password="bobspassword" 
				authorities="ROLE_USER" /> </user-service> </authentication-provider> -->
		</authentication-provider>
	</authentication-manager>

	<!-- 用户的密码加密或解密 -->
	<beans:bean id="passwordEncoder"
		class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" />

	<!--登录验证成功处理器 -->
	<beans:bean id="authenticateSuccessHandler"
		class="com.mltech.proaccounting.aop.MySavedRequestAwareAuthenticationSuccessHandler">
		<beans:property name="defaultTargetUrl" value="/accounms/main.html" />
	</beans:bean>

	<!--登录验证失败处理器 -->
	<beans:bean id="authenticateFailureHandler"
		class="com.mltech.proaccounting.aop.MySimpleUrlAuthenticationFailureHandler">
		<beans:property name="defaultFailureUrl"
			value="/accounms/login.html?validated=false" />
	</beans:bean>

	<beans:bean id="multipleAuthenticationFailureHandler"
		class="org.springframework.security.web.authentication.ExceptionMappingAuthenticationFailureHandler">
		<beans:property name="exceptionMappings">
			<beans:map>
				<beans:entry
					key="com.template.security.exception.EmailNotFoundException" value="/accountms/login?error=1" />
				<beans:entry
					key="com.template.security.exception.PhoneNotFoundException" value="/accountms/login?error=2" />
				<beans:entry
					key="org.springframework.security.core.userdetails.UsernameNotFoundException"
					value="/accountms/login?error=1" />
				<beans:entry key="com.template.security.exception.CaptchaWrongException"
					value="/accountms/login?error=2" />
			</beans:map>
		</beans:property>
	</beans:bean>



</beans:beans>